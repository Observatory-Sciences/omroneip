#Read three fields from struct with offsets (sends one CIP message for the entire struct, with the driver seperating the data)
#Raw offsets

record(ai, "$(P)$(R)readFloat") {
    field(SCAN, "I/O Intr")
    field(DTYP, "asynFloat64")
    field(INP, "@asyn($(PORT), 0, 1)@$(POLLER) ISISTestMultiple[1].PVValue REAL 1 100 &optimise=1")
}

record(lsi, "$(P)$(R)readString1") {
    field(SCAN, "I/O Intr")
    field(DTYP, "asynOctetRead")
    field(INP, "@asyn($(PORT), 0, 1)@$(POLLER) ISISTestMultiple[1].PVName STRING 1 0 &optimise=1&str_max_capacity=60")
    field(SIZV, "61")
}

record(lsi, "$(P)$(R)readString2") {
    field(SCAN, "I/O Intr")
    field(DTYP, "asynOctetRead")
    field(INP, "@asyn($(PORT), 0, 1)@$(POLLER) ISISTestMultiple[1].PVDesc STRING 1 60 &optimise=1&str_max_capacity=40")
    field(SIZV, "61")
}

#Struct definition file

record(ai, "$(P)$(R)readFloat2") {
    field(SCAN, "I/O Intr")
    field(DTYP, "asynFloat64")
    field(INP, "@asyn($(PORT), 0, 1)@$(POLLER) ISISTestMultiple[1].PVValue REAL 1 PVData[2] &optimise=1")
}

record(lsi, "$(P)$(R)readString3") {
    field(SCAN, "I/O Intr")
    field(DTYP, "asynOctetRead")
    field(INP, "@asyn($(PORT), 0, 1)@$(POLLER) ISISTestMultiple[1].PVName STRING 1 PVData[0] &optimise=1&str_max_capacity=60")
    field(SIZV, "61")
}

record(lsi, "$(P)$(R)readString4") {
    field(SCAN, "I/O Intr")
    field(DTYP, "asynOctetRead")
    field(INP, "@asyn($(PORT), 0, 1)@$(POLLER) ISISTestMultiple[1].PVDesc STRING 1 PVData[1] &optimise=1&str_max_capacity=40")
    field(SIZV, "61")
}