# record(ai, "$(P)testRead) {
#     field(DTYP, "asynInt32")
#     field(INP, "asyn(PORT, ADDR, TIMEOUT)@poller name[start_index] datatype sliceSize offset extras")
# }

############################ Read Records #######################################
#Test each datatype

# I havent implementated the mask bit yet
record(bi, "$(P)readBool") {
    field(SCAN, "I/O Intr")
    field(DTYP, "asynUInt32Digital")
    field(INP, "@asynMask($(PORT), 0, 1)@$(POLLER) testBOOL BOOL 1 none none")
    field(ZNAM, "Off")
    field(ONAM, "On")
}

record(longin, "$(P)readInt8") {
    field(SCAN, "I/O Intr")
    field(DTYP, "asynInt32")
    field(INP, "@asyn($(PORT), 0, 1)@$(POLLER) testSINT SINT 1 none &allow_packing=0")
}

record(waveform, "$(P)readInt8Array") {
    field(SCAN, "I/O Intr")
    field(FTVL, "CHAR")
    field(DTYP, "asynInt8ArrayIn")
    field(INP, "@asyn($(PORT), 0, 1)@$(POLLER) sintArray[1] SINT 10 none none")
    field(NELM, "10")
}

record(longin, "$(P)readInt16") {
    field(SCAN, "I/O Intr")
    field(DTYP, "asynInt32")
    field(INP, "@asyn($(PORT), 0, 1)@$(POLLER) transportArray1[$(I)] INT 1 none none")
}

record(waveform, "$(P)readInt16Array") {
    field(SCAN, "I/O Intr")
    field(FTVL, "SHORT")
    field(DTYP, "asynInt16ArrayIn")
    field(INP, "@asyn($(PORT), 0, 1)@$(POLLER) transportArray1[1] INT 10 none none")
    field(NELM, "10")
}

record(longin, "$(P)readInt32") {
    field(SCAN, "I/O Intr")
    field(DTYP, "asynInt32")
    field(INP, "@asyn($(PORT), 0, 1)@$(POLLER) testDint DINT 1 none none")
}

record(waveform, "$(P)readInt32Array") {
    field(SCAN, "I/O Intr")
    field(FTVL, "LONG")
    field(DTYP, "asynInt32ArrayIn")
    field(INP, "@asyn($(PORT), 0, 1)@$(POLLER) dintArray[1] DINT 10 none none")
    field(NELM, "10")
}

#Should be int64in but not supported in epics base 3.15
record(ai, "$(P)readInt64") {
    field(SCAN, "I/O Intr")
    field(DTYP, "asynInt64")
    field(INP, "@asyn($(PORT), 0, 1)@$(POLLER) Zones[$(I)].ZTC.SampleTimeL LINT 1 UDT801_ZTC[13] &optimise=1")
}

record(longin, "$(P)readUInt8") {
    field(SCAN, "I/O Intr")
    field(DTYP, "asynInt32")
    field(INP, "@asyn($(PORT), 0, 1)@$(POLLER) testUSINT USINT 1 none &allow_packing=0")
}

record(waveform, "$(P)readUInt8Array") {
    field(SCAN, "I/O Intr")
    field(FTVL, "UCHAR")
    field(DTYP, "asynInt8ArrayIn")
    field(INP, "@asyn($(PORT), 0, 1)@$(POLLER) usintArray[1] USINT 10 none none")
    field(NELM, "10")
}

record(longin, "$(P)readUInt16") {
    field(SCAN, "I/O Intr")
    field(DTYP, "asynInt32")
    field(INP, "@asyn($(PORT), 0, 1)@$(POLLER) statusChannels[$(I)].status UINT 1 StatusChannel[0] &optimise=1")
}

record(waveform, "$(P)readUInt16Array") {
    field(SCAN, "I/O Intr")
    field(FTVL, "USHORT")
    field(DTYP, "asynInt16ArrayIn")
    field(INP, "@asyn($(PORT), 0, 1)@$(POLLER) uintArray[1] UINT 10 none none")
    field(NELM, "10")
}

record(longin, "$(P)readUInt32") {
    field(SCAN, "I/O Intr")
    field(DTYP, "asynInt32")
    field(INP, "@asyn($(PORT), 0, 1)@$(POLLER) testUDINT UDINT 1 none none")
}

record(waveform, "$(P)readUInt32Array") {
    field(SCAN, "I/O Intr")
    field(FTVL, "ULONG")
    field(DTYP, "asynInt32ArrayIn")
    field(INP, "@asyn($(PORT), 0, 1)@$(POLLER) udintArray[1] UDINT 10 none none")
    field(NELM, "10")
}

#Should be int64in but not supported in epics base 3.15
record(ai, "$(P)readUInt64") {
    field(SCAN, "I/O Intr")
    field(DTYP, "asynInt64")
    field(INP, "@asyn($(PORT), 0, 1)@$(POLLER) testULINT ULINT 1 none none")
}

record(ai, "$(P)readFloat32") {
    field(SCAN, "I/O Intr")
    field(DTYP, "asynFloat64")
    field(INP, "@asyn($(PORT), 0, 1)@$(POLLER) ISISTestMultiple[$(I)].PVValue REAL 1 PVData[2] &optimise=1")
}

record(ai, "$(P)readFloat64") {
    field(SCAN, "I/O Intr")
    field(DTYP, "asynFloat64")
    field(INP, "@asyn($(PORT), 0, 1)@$(POLLER) testLREAL LREAL 1 none none")
}

record(lsi, "$(P)readString") {
    field(SCAN, "I/O Intr")
    field(DTYP, "asynOctetRead")
    field(INP, "@asyn($(PORT), 0, 1)@$(POLLER) ISISTestMultiple[$(I)].PVName STRING 1 PVData[0] &optimise=1")
    field(SIZV, "61")
}

record(waveform, "$(P)readWord") {
    field(SCAN, "I/O Intr")
    field(FTVL, "UCHAR")
    field(DTYP, "asynInt8ArrayIn")
    field(INP, "@asyn($(PORT), 0, 1)@$(POLLER) Zones[$(I)].ZTC.ErrorID WORD 1 UDT801_ZTC[28] &optimise=1")
    field(NELM, "2")
}

record(waveform, "$(P)readWordArray") {
    field(SCAN, "I/O Intr")
    field(FTVL, "UCHAR")
    field(DTYP, "asynInt8ArrayIn")
    field(INP, "@asyn($(PORT), 0, 1)@$(POLLER) wordArray[1] WORD 10 none none")
    field(NELM, "20")
}

record(waveform, "$(P)readDWord") {
    field(SCAN, "I/O Intr")
    field(FTVL, "UCHAR")
    field(DTYP, "asynInt8ArrayIn")
    field(INP, "@asyn($(PORT), 0, 1)@$(POLLER) testDWORD DWORD 1 none none")
    field(NELM, "4")
}

record(waveform, "$(P)readDWordArray") {
    field(SCAN, "I/O Intr")
    field(FTVL, "UCHAR")
    field(DTYP, "asynInt8ArrayIn")
    field(INP, "@asyn($(PORT), 0, 1)@$(POLLER) dwordArray[1] DWORD 10 none none")
    field(NELM, "40")
}

record(waveform, "$(P)readLWord") {
    field(SCAN, "I/O Intr")
    field(FTVL, "UCHAR")
    field(DTYP, "asynInt8ArrayIn")
    field(INP, "@asyn($(PORT), 0, 1)@$(POLLER) testLWORD LWORD 1 none none")
    field(NELM, "8")
}

record(waveform, "$(P)readLWordArray") {
    field(SCAN, "I/O Intr")
    field(FTVL, "UCHAR")
    field(DTYP, "asynInt8ArrayIn")
    field(INP, "@asyn($(PORT), 0, 1)@$(POLLER) lwordArray[1] LWORD 10 none none")
    field(NELM, "80")
}

record(waveform, "$(P)readUDT") {
    field(SCAN, "I/O Intr")
    field(FTVL, "UCHAR")
    field(DTYP, "asynInt8ArrayIn")
    field(INP, "@asyn($(PORT), 0, 1)@$(POLLER) ISISTestMultiple[$(I)] UDT 1 none none")
    field(NELM, "1996")
}

#This essentially just reads pvName.PVDesc
record(waveform, "$(P)readUDT2") {
    field(SCAN, "I/O Intr")
    field(FTVL, "UCHAR")
    field(DTYP, "asynInt8ArrayIn")
    field(INP, "@asyn($(PORT), 0, 1)@$(POLLER) ISISTestMultiple[$(I)] UDT 1 60 &UDT_read_size=40")
    field(NELM, "1996")
}

#Not currently working as the Omron PLC seems to be returning TIME data as TIME_NSEC data which libplctag doesnt understand
record(stringin, "$(P)readTime"){
    field(SCAN, "I/O Intr")
    field(DTYP, "asynOctetRead")
    field(INP, "@asyn($(PORT), 0, 1)@$(POLLER) testTime TIME 1 none none")
}
