# record(ai, "$(P)testRead) {
#     field(DTYP, "asynInt32")
#     field(INP, "asyn(PORT, ADDR, TIMEOUT)@poller tag_name[start_index] data_type length extras")
# }

############################ Write Records #######################################
#Test each datatype

record(longout, "$(P)writeInt16") {
    field(DTYP, "asynInt32")
    field(OUT, "@asyn($(PORT), 0, 1)transportArray1[1] INT 1")
}

record(longout, "$(P)writeInt32") {
    field(DTYP, "asynInt32")
    field(OUT, "@asyn($(PORT), 0, 1)transportArray1[1] DINT 1") #actually writing to an INT
}

#Should be int64in but not supported in epics base 3.15
record(ao, "$(P)writeInt64") {
    field(DTYP, "asynInt64")
    field(OUT, "@asyn($(PORT), 0, 1)Zones[1].ZTC.SampleTimeL LINT 1")
}

record(longout, "$(P)writeUInt16") {
    field(DTYP, "asynInt32")
    field(OUT, "@asyn($(PORT), 0, 1)statusChannels[1].status UINT 1")
}

record(longout, "$(P)writeUInt32") {
    field(DTYP, "asynInt32")
    field(OUT, "@asyn($(PORT), 0, 1)statusChannels[1].status UDINT 1") #Actually reading UINT
}

#Should be int64in but not supported in epics base 3.15
record(ao, "$(P)writeUInt64") {
    field(DTYP, "asynInt64")
    field(OUT, "@asyn($(PORT), 0, 1)statusChannels[1].status ULINT 1") #Actually reading UINT
}

record(ao, "$(P)writeFloat32") {
    field(DTYP, "asynFloat64")
    field(OUT, "@asyn($(PORT), 0, 1)Zone_Heaters.Zone_01.Zone_Circuit_01.CT_Heater_Current REAL 1")
}

record(ao, "$(P)writeFloat64") {
    field(DTYP, "asynFloat64")
    field(OUT, "@asyn($(PORT), 0, 1)Zone_Heaters.Zone_01.Zone_Circuit_01.CT_Heater_Current LREAL 1") #actually reading a REAL
}

record(lso, "$(P)writeString") {
    field(DTYP, "asynOctetWrite")
    field(OUT, "@asyn($(PORT), 0, 1)ISISTestMultiple[1].PVName STRING 1 &str_is_zero_terminated=0&str_is_fixed_length=0&str_pad_bytes=0&str_is_counted=1&str_count_word_bytes=2&str_max_capacity=60")
    field(SIZV, "61")
}

#record(stringin, "$(P)writeWord") {
#    field(DTYP, "asynOctetWrite")
#    field(INP, "@asyn($(PORT), 0, 1)Zones[1].ZTC.ErrorID WORD 1")
#}

#record(stringin, "$(P)writeDWord") {
#    field(DTYP, "asynOctetWrite")
#    field(INP, "@asyn($(PORT), 0, 1)Zones[1].ZTC.ErrorID DWORD 1") #actually reading a WORD
#}

#record(stringin, "$(P)writeLWord") {
#    field(DTYP, "asynOctetWrite")
#    field(INP, "@asyn($(PORT), 0, 1)Zones[1].ZTC.ErrorID LWORD 1") #actually reading a WORD
#}

#record(waveform, "$(P)readUDT") {
#    field(FTVL, "UCHAR")
#    field(DTYP, "asynInt8ArrayIn")
#    field(INP, "@asyn($(PORT), 0, 1)statusChannels UDT 1")
#    field(NELM, "1996")
#}

#record(stringin, "$(P)readDateTime"){
#    field(DTYP, "asynOctetRead")
#    field(INP, "@asyn($(PORT), 0, 1)Zones[1].ZTC.ErrorID LWORD 1")
#}


#record(waveform, "$(P)readWordAsCharArray") {
#    field(FTVL, "UCHAR")
#    field(DTYP, "asynInt8ArrayIn")
#    field(INP, "@asyn($(PORT), 0, 1)Zones[1].ZTC.ErrorID UDT 1")
#    field(NELM, "2")
#}

