# record(ao, "$(P)testRead) {
#     field(DTYP, "asynInt32")
#     field(OUT, "asyn(PORT, ADDR, TIMEOUT)@poller tag_name[start_index] data_type sliceSize offset extras")
# }

############################ Write Records #######################################
#Test each datatype

record(bo, "$(P)writeBool") {
    field(DTYP, "asynUInt32Digital")
    field(OUT, "@asynMask($(PORT), 0, 1)testBOOL BOOL 1 none none")
    field(ZNAM, "Off")
    field(ONAM, "On")
}

record(longout, "$(P)writeInt8") {
    field(DTYP, "asynInt32")
    field(OUT, "@asyn($(PORT), 0, 1)testSINT SINT 1 none &allow_packing=0")
}


record(longout, "$(P)writeInt16") {
    field(DTYP, "asynInt32")
    field(OUT, "@asyn($(PORT), 0, 1)transportArray1[$(I)] INT 1 none none")
}

record(waveform, "$(P)writeInt16Array") {
    field(FTVL, "SHORT")
    field(DTYP, "asynInt16ArrayOut")
    field(INP, "@asyn($(PORT), 0, 1)intArray[1] INT 10 none none")
    field(NELM, "10")
}

record(longout, "$(P)writeInt32") {
    field(DTYP, "asynInt32")
    field(OUT, "@asyn($(PORT), 0, 1)testDint DINT 1 none none")
}

record(waveform, "$(P)writeInt32Array") {
    field(FTVL, "LONG")
    field(DTYP, "asynInt32ArrayOut")
    field(INP, "@asyn($(PORT), 0, 1)dintArray[1] DINT 10 none none")
    field(NELM, "10")
}

#Should be int64in but not supported in epics base 3.15
record(ao, "$(P)writeInt64") {
    field(DTYP, "asynInt64")
    field(OUT, "@asyn($(PORT), 0, 1)Zones[1].ZTC.SampleTimeL LINT 1 none none")
}

record(longout, "$(P)writeUInt8") {
    field(DTYP, "asynInt32")
    field(OUT, "@asyn($(PORT), 0, 1)testUSINT USINT 1 none &allow_packing=0")
}

record(longout, "$(P)writeUInt16") {
    field(DTYP, "asynInt32")
    field(OUT, "@asyn($(PORT), 0, 1)statusChannels[1].status UINT 1 none none")
}

record(waveform, "$(P)writeUInt16Array") {
    field(FTVL, "USHORT")
    field(DTYP, "asynInt16ArrayOut")
    field(INP, "@asyn($(PORT), 0, 1)uintArray[1] UINT 10 none none")
    field(NELM, "10")
}

record(longout, "$(P)writeUInt32") {
    field(DTYP, "asynInt32")
    field(OUT, "@asyn($(PORT), 0, 1)testUDINT UDINT 1 none none")
}

record(waveform, "$(P)writeUInt32Array") {
    field(FTVL, "ULONG")
    field(DTYP, "asynInt32ArrayOut")
    field(INP, "@asyn($(PORT), 0, 1)udintArray[1] UDINT 10 none none")
    field(NELM, "10")
}

#Should be int64in but not supported in epics base 3.15
record(ao, "$(P)writeUInt64") {
    field(DTYP, "asynInt64")
    field(OUT, "@asyn($(PORT), 0, 1)testULINT ULINT 1 none none")
}

record(ao, "$(P)writeFloat32") {
    field(DTYP, "asynFloat64")
    field(OUT, "@asyn($(PORT), 0, 1)ISISTestMultiple[1].PVValue REAL 1 none none")
}

record(waveform, "$(P)writeFloatArray") {
    field(FTVL, "FLOAT")
    field(DTYP, "asynFloat32ArrayOut")
    field(INP, "@asyn($(PORT), 0, 1)floatArray[1] REAL 10 none none")
    field(NELM, "10")
}

record(ao, "$(P)writeFloat64") {
    field(DTYP, "asynFloat64")
    field(OUT, "@asyn($(PORT), 0, 1)testLREAL LREAL 1 none none")
}

record(waveform, "$(P)writeDoubleArray") {
    field(FTVL, "DOUBLE")
    field(DTYP, "asynFloat64ArrayOut")
    field(INP, "@asyn($(PORT), 0, 1)doubleArray[1] LREAL 10 none none")
    field(NELM, "10")
}

record(lso, "$(P)writeString") {
    field(DTYP, "asynOctetWrite")
    field(OUT, "@asyn($(PORT), 0, 1)ISISTestMultiple[1].PVName STRING 1 none &str_max_capacity=60")
    field(SIZV, "61")
    info(asyn:INITIAL_READBACK, "1")
}

record(waveform, "$(P)writeWord") {
    field(FTVL, "UCHAR")
    field(DTYP, "asynInt8ArrayOut")
    field(INP, "@asyn($(PORT), 0, 1)Zones[$(I)].ZTC.ErrorID WORD 1 none none")
    field(NELM, "2")
}

record(waveform, "$(P)writeWordArray") {
    field(FTVL, "UCHAR")
    field(DTYP, "asynInt8ArrayOut")
    field(INP, "@asyn($(PORT), 0, 1)wordArray[1] WORD 10 none none")
    field(NELM, "20")
}

record(waveform, "$(P)writeDWord") {
    field(FTVL, "UCHAR")
    field(DTYP, "asynInt8ArrayOut")
    field(INP, "@asyn($(PORT), 0, 1)testDWORD DWORD 1 none none")
    field(NELM, "4")
}

record(waveform, "$(P)writeDWordArray") {
    field(FTVL, "UCHAR")
    field(DTYP, "asynInt8ArrayOut")
    field(INP, "@asyn($(PORT), 0, 1)dwordArray[1] DWORD 10 none none")
    field(NELM, "40")
}

record(waveform, "$(P)writeLWord") {
    field(FTVL, "UCHAR")
    field(DTYP, "asynInt8ArrayOut")
    field(INP, "@asyn($(PORT), 0, 1)testLWORD LWORD 1 none none")
    field(NELM, "8")
}

record(waveform, "$(P)writeLWordArray") {
    field(FTVL, "UCHAR")
    field(DTYP, "asynInt8ArrayOut")
    field(INP, "@asyn($(PORT), 0, 1)lwordArray[1] LWORD 10 none none")
    field(NELM, "80")
}

record(waveform, "$(P)writeUDT") {
    field(FTVL, "UCHAR")
    field(DTYP, "asynInt8ArrayOut")
    field(INP, "@asyn($(PORT), 0, 1)ISISTestMultiple[1] UDT 1 none none")
    field(NELM, "1996")
}

#This writes an array of 3 UDTs, each 204 bytes long.
#The offset of 408 means that anything entered into the waveform, writes to the third UDT
#Any values not written to the waveform will be filled in with the values currently in the tag in libplctag
#This means that if another libplctag tag has written to the PLC and overwritten the UDT, as this data
#Is not reflected in this tag locally, we can potentially overwrite what was written to the UDT
#With the old values remaining in this libplctag tag.
record(waveform, "$(P)writeUDTArray") {
    field(FTVL, "UCHAR")
    field(DTYP, "asynInt8ArrayOut")
    field(INP, "@asyn($(PORT), 0, 1)ISISTestMultiple[1] UDT 3 408 none")
    field(NELM, "612")
}

#Not currently working as the Omron PLC seems to be returning TIME data as TIME_NSEC data which libplctag doesnt understand
#record(stringout, "$(P)writeTime"){
#    field(DTYP, "asynOctetWrite")
#    field(OUT, "@asyn($(PORT), 0, 1)testTime TIME 1 none none")
#    info(asyn:INITIAL_READBACK, "1")
#}


