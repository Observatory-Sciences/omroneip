#Test reading a string within a UDT with default settings
#The user has specified an offset (from structure definition file), the driver will download the entire UDT and read the string from there
#record(lsi, "$(P)readString1") {
#    field(SCAN, "I/O Intr")
#    field(DTYP, "asynOctetRead")
#    field(INP, "@asyn($(PORT), 0, 1)@$(POLLER) ISISTestMultiple[1].PVName STRING 1 PVData[0] &optimise=1&str_max_capacity=60")
#    field(SIZV, "61")
#}

#Required to make the above test work, this second string read from ISISTestMultiple triggers an optimisation
#This downloads the UDT in its entirety, meaning that the string is formatted differently for both this and the previous record
#This means that str_max_capacity must be defined
#record(lsi, "$(P)readString2") {
#    field(SCAN, "I/O Intr")
#    field(DTYP, "asynOctetRead")
#    field(INP, "@asyn($(PORT), 0, 1)@$(POLLER) ISISTestMultiple[1].PVDesc STRING 1 PVData[1] &optimise=1&str_max_capacity=40")
#    field(SIZV, "41")
#}

#As str_max_capacity is not defined, we get an error
#record(lsi, "$(P)readString3") {
#    field(SCAN, "I/O Intr")
#    field(DTYP, "asynOctetRead")
#    field(INP, "@asyn($(PORT), 0, 1)@$(POLLER) ISISTestMultiple[1].PVDesc STRING 1 PVData[1] &optimise=1")
#    field(SIZV, "41")
#}

###################################################################################################################

#Test reading a string within an array with default settings
record(lsi, "$(P)readString4") {
    field(SCAN, "I/O Intr")
    field(DTYP, "asynOctetRead")
    field(INP, "@asyn($(PORT), 0, 1)@$(POLLER) myStringArray[1] STRING 1 none none")
    field(SIZV, "61")
}

#Test reading a slice of strings from an array with default settings
#This should give an error as this is not supported, (UDT must be used)
#record(lsi, "$(P)readString5") {
#    field(SCAN, "I/O Intr")
#    field(DTYP, "asynOctetRead")
#    field(INP, "@asyn($(PORT), 0, 1)@$(POLLER) myStringArray[1] STRING 2 none none")
#    field(SIZV, "61")
#}

#Test reading a string directly with default settings
#record(lsi, "$(P)readString6") {
#    field(SCAN, "I/O Intr")
#    field(DTYP, "asynOctetRead")
#    field(INP, "@asyn($(PORT), 0, 1)@$(POLLER) ISISTestMultiple[1].PVDesc STRING 1 none none")
#    field(SIZV, "61")
#}

#Same as above but using stringin
#record(stringin, "$(P)readString7") {
#    field(SCAN, "I/O Intr")
#    field(DTYP, "asynOctetRead")
#    field(INP, "@asyn($(PORT), 0, 1)@$(POLLER) ISISTestMultiple[2].PVDesc STRING 1 none none")
#}


#We request all the data starting at the 3rd char
#record(stringin, "$(P)readString9") {
#    field(SCAN, "I/O Intr")
#    field(DTYP, "asynOctetRead")
#    field(INP, "@asyn($(PORT), 0, 1)@$(POLLER) ISISTestMultiple[2].PVDesc STRING 1 2 &str_max_capacity=40")
#}

#Incorrectly overwrite some attributes for fun
#record(stringin, "$(P)readString10") {
#    field(SCAN, "I/O Intr")
#    field(DTYP, "asynOctetRead")
#    field(INP, "@asyn($(PORT), 0, 1)@$(POLLER) ISISTestMultiple[2].PVDesc STRING 1 2 &str_max_capacity=40&str_is_zero_terminated=1&str_is_fixed_length=0&str_pad_to_multiple_bytes=0&str_is_counted=0&str_count_word_bytes=0")
#}

#record(stringin, "$(P)readTime") {
#    field(SCAN, "Passive")
#    field(DTYP,"Soft Timestamp")
#    field(TSEL,"$(P)readDT.VAL PP")
#    field(INP, "@%Y-%m-%d %H:%M:%S.%f")
#}

#record(waveform, "$(P)readBoolArray") {
#    field(SCAN, "I/O Intr")
#    field(FTVL, "UCHAR")
#    field(DTYP, "asynInt8ArrayIn")
#    field(INP, "@asyn($(PORT), 0, 1)@$(POLLER) boolArray UDT 1 none &allow_packing=0")
#    field(NELM, "1996")
#}

#record(stringin, "$(P)readDateTime"){
#    field(SCAN, "I/O Intr")
#    field(DTYP, "asynOctetRead")
#    field(INP, "@asyn($(PORT), 0, 1)@$(POLLER) testTime TIME 1 none none")
#}

#record(stringin, "$(P)readTime"){
#    field(SCAN, "I/O Intr")
#    field(DTYP, "asynOctetRead")
#    field(INP, "@asyn($(PORT), 0, 1)@$(POLLER) testTime2 TIME 1 none none")
#}

#record(ai, "$(P)testReadPassive") {
#    #field(SCAN, "1 second")
#    field(SCAN, "Passive")
#    field(DTYP, "asynFloat64")
#    field(INP, "@asyn($(PORT), 0, 1)@$(POLLER) ISISTestMultiple[1].PVValue REAL 1")
#}
 
#record(ai, "$(P)testReadIntr") {
#    field(SCAN, "I/O Intr")
#    field(DTYP, "asynFloat64")
#    field(INP, "@asyn($(PORT), 0, 1)@$(POLLER) ISISTestMultiple[2].PVValue REAL 1")
#}

#record(ai, "$(P)testReadIntr3") {
#    field(SCAN, "I/O Intr")
#    field(DTYP, "asynFloat64")
#    field(INP, "@asyn($(PORT), 0, 1)@$(POLLER) ISISTestMultiple[3].PVValue LREAL 1")
#}

#record(waveform, "$(P)readUDT") {
#    field(SCAN, "I/O Intr")
#    field(FTVL, "UCHAR")
#    field(DTYP, "asynInt8ArrayIn")
#    field(INP, "@asyn($(PORT), 0, 1)@$(POLLER) statusChannels UDT 1 $(P)")
#    field(NELM, "1996")
#}

# Gets a WORD from the start of the statusChannels UDT
#record(subArray, "$(P)getSubUInt16"){
#    field(SCAN, "1 second")
#    field(FTVL, "ULONG")
#    field(NELM, "2")
#    field(MALM, "1996")
#    field(INP, "$(P)readUDT.VAL")
#    field(INDX, "0")
#}

#record(lso, "$(P)writeString") {
#    field(DTYP, "asynOctetWrite")
#    field(OUT, "@asyn($(PORT), 0, 1)TestString STRING 1 none &str_max_capacity=60&str_pad_to_multiple_bytes=1&str_is_zero_terminated=0")
#    field(SIZV, "61")
#}

#record(lsi, "$(P)readString") {
#    field(SCAN, "I/O Intr")
#    field(DTYP, "asynOctetRead")
#    field(INP, "@asyn($(PORT), 0, 1)@$(POLLER) TestString STRING 1 none 0")
#    field(SIZV, "61")
#}

#record(bo, "$(P)writeBool") {
#    field(DTYP, "asynUInt32Digital")
#    field(OUT, "@asynMask($(PORT), 0, 1)testBOOL BOOL 1 none 0")
#    field(ZNAM, "Off")
#    field(ONAM, "On")
#}

#record(ai, "$(P)readFloat32Test") {
#    field(SCAN, "I/O Intr")
#    field(DTYP, "asynFloat64")
#    field(INP, "@asyn($(PORT), 0, 1)@$(POLLER) Zone_Heaters.Zone_01.Zone_Circuit_01.CT_Heater_Current REAL 1 0 0")
#}

#record(lsi, "$(P)readStringOffset") {
#    field(SCAN, "I/O Intr")
#    field(DTYP, "asynOctetRead")
#    field(INP, "@asyn($(PORT), 0, 1)@$(POLLER) ISISTestMultiple[1].PVName STRING 1 0 0")
#    field(SIZV, "61")
#}


#record(waveform, "$(P)readISIS") {
#    field(SCAN, "I/O Intr")
#    field(FTVL, "UCHAR")
#    field(DTYP, "asynInt8ArrayIn")
#    field(INP, "@asyn($(PORT), 0, 1)@$(POLLER) ISISTestMultiple[1] UDT 7 0 &elem_size=1428&allow_packing=1")
#    field(NELM, "1996")
#}

#record(ai, "$(P)readZoneReal") {
#    field(SCAN, "I/O Intr")
#    field(DTYP, "asynFloat64")
#    field(INP, "@asyn($(PORT), 0, 1)@$(POLLER) Zones[1] REAL none UDT800_Zone[43] none")
#}

#record(ai, "$(P)readZoneReal2") {
#    field(SCAN, "I/O Intr")
#    field(DTYP, "asynFloat64")
#    field(INP, "@asyn($(PORT), 0, 1)@$(POLLER) Zones[1] REAL none UDT800_Zone[0][42][9] none")
#}

#record(ai, "$(P)readZoneReal3") {
#    field(SCAN, "I/O Intr")
#    field(DTYP, "asynFloat64")
#    field(INP, "@asyn($(PORT), 0, 1)@$(POLLER) Zones[1] REAL none UDT800_Zone[1] none")
#}

#record(ai, "$(P)readZoneReal4") {
#    field(SCAN, "I/O Intr")
#    field(DTYP, "asynFloat64")
#    field(INP, "@asyn($(PORT), 0, 1)@$(POLLER) Zones[1] REAL none UDT800_Zone[0][10] none")
#}

#record(waveform, "$(P)readUDT") {
#    field(SCAN, "I/O Intr")
#    field(FTVL, "UCHAR")
#    field(DTYP, "asynInt8ArrayIn")
#    field(INP, "@asyn($(PORT), 0, 1)@$(POLLER) ISISTestMultiple[1] UDT 1 none none")
#    field(NELM, "1996")
#}

#record(ai, "$(P)readZoneReal5") {
#    field(SCAN, "I/O Intr")
#    field(DTYP, "asynFloat64")
#    field(INP, "@asyn($(PORT), 0, 1)@$(POLLER) Zones[1] REAL none UDT800_Zone[0][1] none")
#}

#record(waveform, "$(P)writeUDT") {
#    field(FTVL, "UCHAR")
#    field(DTYP, "asynInt8ArrayOut")
#    field(INP, "@asyn($(PORT), 0, 1)ISISTestMultiple[1] UDT 1 none 0")
#    field(NELM, "1996")
#}

#record(lso, "$(P)writeString") {
#    field(DTYP, "asynOctetWrite")
#    field(OUT, "@asyn($(PORT), 0, 1)myStringArray[1] STRING 1 none &str_max_capacity=60")
#    field(SIZV, "61")
#}

#record(waveform, "$(P)writeUDT2") {
#    field(FTVL, "UCHAR")
#    field(DTYP, "asynInt8ArrayOut")
#    field(INP, "@asyn($(PORT), 0, 1)stringUDT UDT 1 none &allow_packing=1")
#    field(NELM, "1996")
#}

#record(bo, "$(P)writeBool") {
#    field(DTYP, "asynUInt32Digital")
#    field(OUT, "@asynMask($(PORT), 0, 1)testBOOL BOOL 1 0 0")
#    field(ZNAM, "Off")
#    field(ONAM, "On")
#}