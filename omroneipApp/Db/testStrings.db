#Test reading a string within a UDT with default settings
#The user has specified an offset (from structure definition file), the driver will download the entire UDT and read the string from there
record(lsi, "$(P)readString1") {
    field(SCAN, "I/O Intr")
    field(DTYP, "asynOctetRead")
    field(INP, "@asyn($(PORT), 0, 1)@$(POLLER) ISISTestMultiple[1].PVName STRING 1 PVData[0] &optimise=1&str_max_capacity=60")
    field(SIZV, "61")
}

#Required to make the above test work, this second string read from ISISTestMultiple triggers an optimisation
#This downloads the UDT in its entirety, meaning that the string is formatted differently for both this and the previous record
#This means that str_max_capacity must be defined
record(lsi, "$(P)readString2") {
    field(SCAN, "I/O Intr")
    field(DTYP, "asynOctetRead")
    field(INP, "@asyn($(PORT), 0, 1)@$(POLLER) ISISTestMultiple[1].PVDesc STRING 1 PVData[1] &optimise=1&str_max_capacity=40")
    field(SIZV, "41")
}

#As str_max_capacity is not defined, we get an error
record(lsi, "$(P)readString3") {
    field(SCAN, "I/O Intr")
    field(DTYP, "asynOctetRead")
    field(INP, "@asyn($(PORT), 0, 1)@$(POLLER) ISISTestMultiple[1].PVDesc STRING 1 PVData[1] &optimise=1")
    field(SIZV, "41")
}

###################################################################################################################

#Test reading a string within an array with default settings
record(lsi, "$(P)readString4") {
    field(SCAN, "I/O Intr")
    field(DTYP, "asynOctetRead")
    field(INP, "@asyn($(PORT), 0, 1)@$(POLLER) myStringArray[1] STRING 1 none none")
    field(SIZV, "61")
}

#Test reading a slice of strings from an array with default settings
#This should give an error as this is not supported, (UDT must be used)
record(lsi, "$(P)readString5") {
    field(SCAN, "I/O Intr")
    field(DTYP, "asynOctetRead")
    field(INP, "@asyn($(PORT), 0, 1)@$(POLLER) myStringArray[1] STRING 2 none none")
    field(SIZV, "61")
}

#Test reading a string directly with default settings
record(lsi, "$(P)readString6") {
    field(SCAN, "I/O Intr")
    field(DTYP, "asynOctetRead")
    field(INP, "@asyn($(PORT), 0, 1)@$(POLLER) ISISTestMultiple[1].PVDesc STRING 1 none none")
    field(SIZV, "61")
}

#Same as above but using stringin
record(stringin, "$(P)readString7") {
    field(SCAN, "I/O Intr")
    field(DTYP, "asynOctetRead")
    field(INP, "@asyn($(PORT), 0, 1)@$(POLLER) ISISTestMultiple[2].PVDesc STRING 1 none none")
}

#We request the 2 chars starting from the 4th char
record(stringin, "$(P)readString8") {
    field(SCAN, "I/O Intr")
    field(DTYP, "asynOctetRead")
    field(INP, "@asyn($(PORT), 0, 1)@$(POLLER) ISISTestMultiple[2].PVDesc STRING 1 3 &str_max_capacity=40&offset_read_size=2")
}

#We request all the data starting at the 3rd char
record(stringin, "$(P)readString9") {
    field(SCAN, "I/O Intr")
    field(DTYP, "asynOctetRead")
    field(INP, "@asyn($(PORT), 0, 1)@$(POLLER) ISISTestMultiple[2].PVDesc STRING 1 2 &str_max_capacity=40")
}

#Incorrectly overwrite some attributes for fun
record(stringin, "$(P)readString10") {
    field(SCAN, "I/O Intr")
    field(DTYP, "asynOctetRead")
    field(INP, "@asyn($(PORT), 0, 1)@$(POLLER) ISISTestMultiple[2].PVDesc STRING 1 2 &str_max_capacity=40&str_is_zero_terminated=1&str_is_fixed_length=0&str_pad_to_multiple_bytes=0&str_is_counted=0&str_count_word_bytes=0")
}

###############################################################################################################

#Test writing a string within a UDT with default settings
record(lso, "$(P)writeString1") {
    field(DTYP, "asynOctetWrite")
    field(OUT, "@asyn($(PORT), 0, 1)ISISTestMultiple[1].PVDesc STRING 1 none &str_max_capacity=40")
    field(SIZV, "41")
}

#Test writing a string within a UDT with default settings without defining string capacity (may error on write)
record(lso, "$(P)writeString2") {
    field(DTYP, "asynOctetWrite")
    field(OUT, "@asyn($(PORT), 0, 1)ISISTestMultiple[2].PVDesc STRING 1 none none")
    field(SIZV, "41")
}

#Test writing a string directly with default settings
record(lso, "$(P)writeString3") {
    field(DTYP, "asynOctetWrite")
    field(OUT, "@asyn($(PORT), 0, 1)testString STRING 1 none &str_max_capacity=256")
    field(SIZV, "256")
}

#Try reading a string by overwriting default settings (may error on write)
#These overriding settings are incorrect for this string, but the driver should still accept them, although writing 
#the string will result in an error
record(lso, "$(P)writeString4") {
    field(DTYP, "asynOctetWrite")
    field(OUT, "@asyn($(PORT), 0, 1)ISISTestMultiple[1].PVName STRING 1 none &str_is_zero_terminated=1&str_is_fixed_length=0&str_pad_to_multiple_bytes=0&str_is_counted=0&str_count_word_bytes=0&str_max_capacity=40")
    field(SIZV, "41")
}

#Test writing a string within a UDT with default settings
record(lso, "$(P)writeString5") {
    field(DTYP, "asynOctetWrite")
    field(OUT, "@asyn($(PORT), 0, 1)ISISTestMultiple[2].PVDesc STRING 1 none &str_max_capacity=40")
    field(SIZV, "41")
}